// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v5.29.1
// source: rpc/auditer/service.proto

package auditer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NpmAuditResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NpmAuditResponse) Reset() {
	*x = NpmAuditResponse{}
	mi := &file_rpc_auditer_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NpmAuditResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpmAuditResponse) ProtoMessage() {}

func (x *NpmAuditResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_auditer_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpmAuditResponse.ProtoReflect.Descriptor instead.
func (*NpmAuditResponse) Descriptor() ([]byte, []int) {
	return file_rpc_auditer_service_proto_rawDescGZIP(), []int{0}
}

func (x *NpmAuditResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type NpmAuditRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectName   string                 `protobuf:"bytes,1,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	Result        *NpmAuditResult        `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NpmAuditRequest) Reset() {
	*x = NpmAuditRequest{}
	mi := &file_rpc_auditer_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NpmAuditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpmAuditRequest) ProtoMessage() {}

func (x *NpmAuditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_auditer_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpmAuditRequest.ProtoReflect.Descriptor instead.
func (*NpmAuditRequest) Descriptor() ([]byte, []int) {
	return file_rpc_auditer_service_proto_rawDescGZIP(), []int{1}
}

func (x *NpmAuditRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *NpmAuditRequest) GetResult() *NpmAuditResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type NpmAuditResult struct {
	state              protoimpl.MessageState    `protogen:"open.v1"`
	AuditReportVersion int32                     `protobuf:"varint,1,opt,name=audit_report_version,json=auditReportVersion,proto3" json:"audit_report_version,omitempty"`
	Vulnerabilities    map[string]*Vulnerability `protobuf:"bytes,2,rep,name=vulnerabilities,proto3" json:"vulnerabilities,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Metadata           *Metadata                 `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *NpmAuditResult) Reset() {
	*x = NpmAuditResult{}
	mi := &file_rpc_auditer_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NpmAuditResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpmAuditResult) ProtoMessage() {}

func (x *NpmAuditResult) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_auditer_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpmAuditResult.ProtoReflect.Descriptor instead.
func (*NpmAuditResult) Descriptor() ([]byte, []int) {
	return file_rpc_auditer_service_proto_rawDescGZIP(), []int{2}
}

func (x *NpmAuditResult) GetAuditReportVersion() int32 {
	if x != nil {
		return x.AuditReportVersion
	}
	return 0
}

func (x *NpmAuditResult) GetVulnerabilities() map[string]*Vulnerability {
	if x != nil {
		return x.Vulnerabilities
	}
	return nil
}

func (x *NpmAuditResult) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Vulnerability struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Severity      string                 `protobuf:"bytes,2,opt,name=severity,proto3" json:"severity,omitempty"`
	IsDirect      bool                   `protobuf:"varint,3,opt,name=is_direct,json=isDirect,proto3" json:"is_direct,omitempty"`
	Via           []string               `protobuf:"bytes,4,rep,name=via,proto3" json:"via,omitempty"`
	Effects       []string               `protobuf:"bytes,5,rep,name=effects,proto3" json:"effects,omitempty"`
	Range         string                 `protobuf:"bytes,6,opt,name=range,proto3" json:"range,omitempty"`
	Nodes         []string               `protobuf:"bytes,7,rep,name=nodes,proto3" json:"nodes,omitempty"`
	FixAvailable  *FixAvailable          `protobuf:"bytes,8,opt,name=fix_available,json=fixAvailable,proto3" json:"fix_available,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vulnerability) Reset() {
	*x = Vulnerability{}
	mi := &file_rpc_auditer_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vulnerability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vulnerability) ProtoMessage() {}

func (x *Vulnerability) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_auditer_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vulnerability.ProtoReflect.Descriptor instead.
func (*Vulnerability) Descriptor() ([]byte, []int) {
	return file_rpc_auditer_service_proto_rawDescGZIP(), []int{3}
}

func (x *Vulnerability) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Vulnerability) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *Vulnerability) GetIsDirect() bool {
	if x != nil {
		return x.IsDirect
	}
	return false
}

func (x *Vulnerability) GetVia() []string {
	if x != nil {
		return x.Via
	}
	return nil
}

func (x *Vulnerability) GetEffects() []string {
	if x != nil {
		return x.Effects
	}
	return nil
}

func (x *Vulnerability) GetRange() string {
	if x != nil {
		return x.Range
	}
	return ""
}

func (x *Vulnerability) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Vulnerability) GetFixAvailable() *FixAvailable {
	if x != nil {
		return x.FixAvailable
	}
	return nil
}

type FixAvailable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	IsSemVerMajor bool                   `protobuf:"varint,3,opt,name=is_sem_ver_major,json=isSemVerMajor,proto3" json:"is_sem_ver_major,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FixAvailable) Reset() {
	*x = FixAvailable{}
	mi := &file_rpc_auditer_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FixAvailable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixAvailable) ProtoMessage() {}

func (x *FixAvailable) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_auditer_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixAvailable.ProtoReflect.Descriptor instead.
func (*FixAvailable) Descriptor() ([]byte, []int) {
	return file_rpc_auditer_service_proto_rawDescGZIP(), []int{4}
}

func (x *FixAvailable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FixAvailable) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *FixAvailable) GetIsSemVerMajor() bool {
	if x != nil {
		return x.IsSemVerMajor
	}
	return false
}

type Metadata struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Vulnerabilities *VulnerabilitySummary  `protobuf:"bytes,1,opt,name=vulnerabilities,proto3" json:"vulnerabilities,omitempty"`
	Dependencies    *DependencySummary     `protobuf:"bytes,2,opt,name=dependencies,proto3" json:"dependencies,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_rpc_auditer_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_auditer_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_rpc_auditer_service_proto_rawDescGZIP(), []int{5}
}

func (x *Metadata) GetVulnerabilities() *VulnerabilitySummary {
	if x != nil {
		return x.Vulnerabilities
	}
	return nil
}

func (x *Metadata) GetDependencies() *DependencySummary {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

type VulnerabilitySummary struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Info          int32                  `protobuf:"varint,1,opt,name=info,proto3" json:"info,omitempty"`
	Low           int32                  `protobuf:"varint,2,opt,name=low,proto3" json:"low,omitempty"`
	Moderate      int32                  `protobuf:"varint,3,opt,name=moderate,proto3" json:"moderate,omitempty"`
	High          int32                  `protobuf:"varint,4,opt,name=high,proto3" json:"high,omitempty"`
	Critical      int32                  `protobuf:"varint,5,opt,name=critical,proto3" json:"critical,omitempty"`
	Total         int32                  `protobuf:"varint,6,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VulnerabilitySummary) Reset() {
	*x = VulnerabilitySummary{}
	mi := &file_rpc_auditer_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VulnerabilitySummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilitySummary) ProtoMessage() {}

func (x *VulnerabilitySummary) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_auditer_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilitySummary.ProtoReflect.Descriptor instead.
func (*VulnerabilitySummary) Descriptor() ([]byte, []int) {
	return file_rpc_auditer_service_proto_rawDescGZIP(), []int{6}
}

func (x *VulnerabilitySummary) GetInfo() int32 {
	if x != nil {
		return x.Info
	}
	return 0
}

func (x *VulnerabilitySummary) GetLow() int32 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *VulnerabilitySummary) GetModerate() int32 {
	if x != nil {
		return x.Moderate
	}
	return 0
}

func (x *VulnerabilitySummary) GetHigh() int32 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *VulnerabilitySummary) GetCritical() int32 {
	if x != nil {
		return x.Critical
	}
	return 0
}

func (x *VulnerabilitySummary) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DependencySummary struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Prod          int32                  `protobuf:"varint,1,opt,name=prod,proto3" json:"prod,omitempty"`
	Dev           int32                  `protobuf:"varint,2,opt,name=dev,proto3" json:"dev,omitempty"`
	Optional      int32                  `protobuf:"varint,3,opt,name=optional,proto3" json:"optional,omitempty"`
	Peer          int32                  `protobuf:"varint,4,opt,name=peer,proto3" json:"peer,omitempty"`
	PeerOptional  int32                  `protobuf:"varint,5,opt,name=peer_optional,json=peerOptional,proto3" json:"peer_optional,omitempty"`
	Total         int32                  `protobuf:"varint,6,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DependencySummary) Reset() {
	*x = DependencySummary{}
	mi := &file_rpc_auditer_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DependencySummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependencySummary) ProtoMessage() {}

func (x *DependencySummary) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_auditer_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependencySummary.ProtoReflect.Descriptor instead.
func (*DependencySummary) Descriptor() ([]byte, []int) {
	return file_rpc_auditer_service_proto_rawDescGZIP(), []int{7}
}

func (x *DependencySummary) GetProd() int32 {
	if x != nil {
		return x.Prod
	}
	return 0
}

func (x *DependencySummary) GetDev() int32 {
	if x != nil {
		return x.Dev
	}
	return 0
}

func (x *DependencySummary) GetOptional() int32 {
	if x != nil {
		return x.Optional
	}
	return 0
}

func (x *DependencySummary) GetPeer() int32 {
	if x != nil {
		return x.Peer
	}
	return 0
}

func (x *DependencySummary) GetPeerOptional() int32 {
	if x != nil {
		return x.PeerOptional
	}
	return 0
}

func (x *DependencySummary) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_rpc_auditer_service_proto protoreflect.FileDescriptor

var file_rpc_auditer_service_proto_rawDesc = []byte{
	0x0a, 0x19, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x72, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x74, 0x6f, 0x66,
	0x72, 0x61, 0x6c, 0x65, 0x79, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x65, 0x72, 0x22, 0x2c, 0x0a, 0x10, 0x4e, 0x70, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0x75, 0x0a, 0x0f, 0x4e, 0x70, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x6f, 0x66, 0x72, 0x61,
	0x6c, 0x65, 0x79, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x65, 0x72, 0x2e, 0x4e, 0x70, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xd5, 0x02, 0x0a, 0x0e, 0x4e, 0x70,
	0x6d, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x66,
	0x0a, 0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x74, 0x6f, 0x66, 0x72, 0x61, 0x6c,
	0x65, 0x79, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65,
	0x72, 0x2e, 0x4e, 0x70, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x6f, 0x66, 0x72, 0x61,
	0x6c, 0x65, 0x79, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x6a, 0x0a, 0x14, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x74, 0x6f, 0x66, 0x72, 0x61, 0x6c, 0x65, 0x79, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x80, 0x02, 0x0a, 0x0d, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x76,
	0x69, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x74, 0x6f, 0x66, 0x72, 0x61, 0x6c, 0x65, 0x79, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x78, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0c, 0x66, 0x69, 0x78, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0x65, 0x0a, 0x0c, 0x46, 0x69, 0x78, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6d, 0x5f, 0x76, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73,
	0x53, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x22, 0xb3, 0x01, 0x0a, 0x08,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x0f, 0x76, 0x75, 0x6c, 0x6e,
	0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x6f, 0x66, 0x72, 0x61, 0x6c, 0x65, 0x79, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x75, 0x6c, 0x6e,
	0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x4e, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x6f, 0x66, 0x72, 0x61, 0x6c,
	0x65, 0x79, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x22, 0x9e, 0x01, 0x0a, 0x14, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x6f, 0x77,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x69, 0x67, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0xa4, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x6f, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x65, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0x70, 0x0a, 0x07, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x65, 0x72, 0x12, 0x65, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x70,
	0x6d, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x28, 0x2e, 0x74, 0x6f, 0x66, 0x72, 0x61, 0x6c, 0x65,
	0x79, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x72,
	0x2e, 0x4e, 0x70, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x74, 0x6f, 0x66, 0x72, 0x61, 0x6c, 0x65, 0x79, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x70, 0x6d, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x28, 0x5a, 0x26, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x6f, 0x66, 0x72, 0x61, 0x6c,
	0x65, 0x79, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x79, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_auditer_service_proto_rawDescOnce sync.Once
	file_rpc_auditer_service_proto_rawDescData = file_rpc_auditer_service_proto_rawDesc
)

func file_rpc_auditer_service_proto_rawDescGZIP() []byte {
	file_rpc_auditer_service_proto_rawDescOnce.Do(func() {
		file_rpc_auditer_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_auditer_service_proto_rawDescData)
	})
	return file_rpc_auditer_service_proto_rawDescData
}

var file_rpc_auditer_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_rpc_auditer_service_proto_goTypes = []any{
	(*NpmAuditResponse)(nil),     // 0: tofraley.audity.auditer.NpmAuditResponse
	(*NpmAuditRequest)(nil),      // 1: tofraley.audity.auditer.NpmAuditRequest
	(*NpmAuditResult)(nil),       // 2: tofraley.audity.auditer.NpmAuditResult
	(*Vulnerability)(nil),        // 3: tofraley.audity.auditer.Vulnerability
	(*FixAvailable)(nil),         // 4: tofraley.audity.auditer.FixAvailable
	(*Metadata)(nil),             // 5: tofraley.audity.auditer.Metadata
	(*VulnerabilitySummary)(nil), // 6: tofraley.audity.auditer.VulnerabilitySummary
	(*DependencySummary)(nil),    // 7: tofraley.audity.auditer.DependencySummary
	nil,                          // 8: tofraley.audity.auditer.NpmAuditResult.VulnerabilitiesEntry
}
var file_rpc_auditer_service_proto_depIdxs = []int32{
	2, // 0: tofraley.audity.auditer.NpmAuditRequest.result:type_name -> tofraley.audity.auditer.NpmAuditResult
	8, // 1: tofraley.audity.auditer.NpmAuditResult.vulnerabilities:type_name -> tofraley.audity.auditer.NpmAuditResult.VulnerabilitiesEntry
	5, // 2: tofraley.audity.auditer.NpmAuditResult.metadata:type_name -> tofraley.audity.auditer.Metadata
	4, // 3: tofraley.audity.auditer.Vulnerability.fix_available:type_name -> tofraley.audity.auditer.FixAvailable
	6, // 4: tofraley.audity.auditer.Metadata.vulnerabilities:type_name -> tofraley.audity.auditer.VulnerabilitySummary
	7, // 5: tofraley.audity.auditer.Metadata.dependencies:type_name -> tofraley.audity.auditer.DependencySummary
	3, // 6: tofraley.audity.auditer.NpmAuditResult.VulnerabilitiesEntry.value:type_name -> tofraley.audity.auditer.Vulnerability
	1, // 7: tofraley.audity.auditer.Auditer.RecordNpmAudit:input_type -> tofraley.audity.auditer.NpmAuditRequest
	0, // 8: tofraley.audity.auditer.Auditer.RecordNpmAudit:output_type -> tofraley.audity.auditer.NpmAuditResponse
	8, // [8:9] is the sub-list for method output_type
	7, // [7:8] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_rpc_auditer_service_proto_init() }
func file_rpc_auditer_service_proto_init() {
	if File_rpc_auditer_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_auditer_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_auditer_service_proto_goTypes,
		DependencyIndexes: file_rpc_auditer_service_proto_depIdxs,
		MessageInfos:      file_rpc_auditer_service_proto_msgTypes,
	}.Build()
	File_rpc_auditer_service_proto = out.File
	file_rpc_auditer_service_proto_rawDesc = nil
	file_rpc_auditer_service_proto_goTypes = nil
	file_rpc_auditer_service_proto_depIdxs = nil
}
